#!/usr/bin/env ruby

require 'import_js'
require 'slop'
require 'json'

opts = Slop.parse do |o|
  o.string '-w', '--word', 'A word/variable to import'
  o.bool '--goto', 'Instead of importing, just print the path to a module'
  o.array '--selections', 'A list of resolved selections, e.g. Foo:0,Bar:1'
  o.string '--filename',
           'A path to the file currently being processed. ' \
           'If contents are passed in via stdin, this is only used as a way ' \
           'to make sure that the right configuration is used. ' \
           'If nothing is passed in via stdin, the contents of this file ' \
           'will be used.'
  o.bool '--overwrite',
         'Overwrite the file with the result after importing' \
         '(the default behavior is to print to stdout)'

  o.on '-v', '--version', 'print the current version' do
    puts ImportJS::VERSION
    exit
  end
  o.on '-h', '--help', 'prints help' do
    puts o
    exit
  end
end

file_contents = if STDIN.tty?
                  fail 'Missing filename' unless opts[:filename]
                  File.read(opts[:filename]).split("\n")
                else
                  STDIN.read.split("\n")
                end

if opts[:selections]
  # Convert array of string tuples to hash, `word` => `selectedIndex`
  opts[:selections] = Hash[opts[:selections].map do |str|
    tuple = str.split(':')
    [tuple.first, tuple[1].to_i]
  end]
end

editor = ImportJS::CommandLineEditor.new(file_contents, opts)
importer = ImportJS::Importer.new(editor)
if opts.goto?
  importer.goto
elsif opts[:word]
  importer.import
else
  importer.fix_imports
end

if opts.goto?
  # Print the path to the module to go to
  puts editor.goto
elsif opts[:overwrite]
  File.open(opts[:filename], 'w') do |f|
    f.write editor.current_file_content
  end
else
  # Print resulting file to stdout
  puts editor.current_file_content
end

# Print messages to stderr
meta = {
  messages: editor.messages,
}
ask = editor.ask_for_selections
meta[:ask_for_selections] = ask unless ask.empty?
STDERR.puts meta.to_json
